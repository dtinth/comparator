/**
 * Tools for creating {@link (Comparator:interface)}s.
 * The API design is based on Javaâ€™s {@link `java.util.Comparator` | https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html} interface.
 *
 * @packageDocumentation
 */

/**
 * A comparator can be used to compare two objects in order to determine their ordering.
 *
 * It is a function that takes two arguments and returns a negative number if the first
 * argument should be ordered before the second, a positive number if the second should be
 * ordered before the first, or zero if the two arguments are equivalent.
 *
 * @public
 */
export interface Comparator<T> {
  (a: T, b: T): number;
}

/**
 * Extra methods available on {@link (Comparator:interface)} instances generated by the static methods
 * in the {@link (Comparator:namespace)} namespace module.
 * @public
 */
export interface ComparatorX<T> extends Comparator<T> {
  reversed(): ComparatorX<T>;
  thenComparing<U>(
    keyExtractor: (value: T) => U,
    keyComparator?: Comparator<U>,
  ): ComparatorX<T>;
  /**
   * @beta
   */
  thenComparingBy(other: Comparator<T>): ComparatorX<T>;
}

/**
 * Methods for creating {@link (Comparator:interface)} instances.
 * These instances are enhanced with additional methods defined in the {@link (ComparatorX:interface)} interface.
 * @public
 */
export namespace Comparator {
  export function comparing<T, U>(
    keyExtractor: (value: T) => U,
    keyComparator: Comparator<U> = naturalOrder(),
  ): ComparatorX<T> {
    return ComparatorX.from((a, b) =>
      keyComparator(keyExtractor(a), keyExtractor(b)),
    );
  }

  export function naturalOrder<T>(): ComparatorX<T> {
    return ComparatorX.from((a, b) => (a < b ? -1 : a > b ? 1 : 0));
  }

  export function reverseOrder<T>(): ComparatorX<T> {
    return ComparatorX.from((a, b) => (a < b ? 1 : a > b ? -1 : 0));
  }
}

/**
 * Tools for enhancing a {@link (Comparator:interface)} instance with additional methods
 * as defined in the {@link (ComparatorX:interface)} interface.
 * @public
 */
export namespace ComparatorX {
  /**
   * Enhances a {@link (Comparator:interface)} instance with additional methods
   * as defined in the {@link (ComparatorX:interface)} interface.
   *
   * @remarks The passed in comparator will mutated to include the additional methods at runtime.
   * @param comparator - the {@link (Comparator:interface)} instance to enhance
   * @returns the enhanced instance
   * @beta
   */
  export function from<T>(comparator: Comparator<T>): ComparatorX<T> {
    return Object.assign(comparator, {
      reversed: () => from<T>((a, b) => comparator(b, a)),
      thenComparing: <U>(
        keyExtractor: (value: T) => U,
        keyComparator: Comparator<U> = Comparator.naturalOrder(),
      ) => {
        return from<T>(
          (a, b) =>
            comparator(a, b) || keyComparator(keyExtractor(a), keyExtractor(b)),
        );
      },
      thenComparingBy: (other: Comparator<T>) => {
        return from<T>((a, b) => comparator(a, b) || other(a, b));
      },
    });
  }
}
